" VIMRC LOCAL - vim settings without plugins
" So we can split VIM distributions and still have profile like settings
" -------------------

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands
set cursorline    " cursorline highlight

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Make it obvious where 80 characters is
" set textwidth=80
" set colorcolumn=+1

" Numbers
set number
set numberwidth=5

" Leader
let mapleader = '\'

" Configs

set nocompatible
set encoding=utf-8
set autoread
set hidden
set history=1000
"set shellpipe=2>/dev/null " this conflicts with Ag
set shell=/bin/bash
set re=1

set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" Softtabs, 2 spaces
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Numbers
set number
set numberwidth=4

" Display extra whitespace
set list listchars=tab:--,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

" markdown preview
let vim_markdown_preview_hotkey="<C-m>"
let vim_markdown_preview_browser="Google Chrome"
let vim_markdown_preview_github=1
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Switch between the last two files
nnoremap <leader><space> <c-^>

" vim-test mappings
nnoremap <silent> <Leader>rt :TestFile<CR>
nnoremap <silent> <Leader>rn :TestNearest<CR>
nnoremap <silent> <Leader>rl :TestLast<CR>
nnoremap <silent> <Leader>ra :TestSuite<CR>
nnoremap <silent> <leader>gt :TestVisit<CR>

nmap <leader>st :SyntasticToggleMode<cr>

" Always use vertical diffs
set diffopt+=vertical

" Make jk/kj escape
imap jk <esc>
imap kj <esc>
imap <C-s> :w

" quick splits
nnoremap <leader>vv :vsp<CR>
nnoremap <leader>vh :sp<CR>

" save myself from missing the Shift key
nnoremap ; :

syntax enable
set t_Co=257

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"Javascript highlighting (pangloss/vim-javascript)
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1

"mxw/vim-jsx
" -- jsx highlighting on .jsx files, too
let g:jsx_ext_required = 0

" -- restrict JSX to files with pre v.012 @jsx React.DOM pragma
"let g:jsx_pragma_required = 1

"scrooloose/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']

" NERD Commenter
"" Comment out a line in insert-mode
inoremap \cc <C-o>:call NERDComment(0,"toggle")<C-m>
nnoremap <leader>cc :call NERDComment(0,"toggle")<CR>
vnoremap <leader>cc :call NERDComment(0,"toggle")<CR>

" More?
color pyte
" set background=light
set background=dark

highlight CursorLine cterm=underline ctermbg=NONE gui=underline
highlight CursorColumn ctermbg=darkred
nnoremap <Leader>cu :set cursorline!<CR>
nnoremap <Leader>so :source ~/.vimrc<CR>


" VIM RSpec
" RSpec.vim mappings
map <Leader>rr :call RunCurrentSpecFile()<CR>
map <Leader>rn :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>
map <Leader>ra :call RunAllSpecs()<CR>

" No auto line breaks
set formatoptions-=t


set background=light

